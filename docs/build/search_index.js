var documenterSearchIndex = {"docs":
[{"location":"modules/rRBC.html#rotating-Rayleigh-Benard-convection-(rRBC)","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"","category":"section"},{"location":"modules/rRBC.html#Problem-setup","page":"rotating Rayleigh Benard convection (rRBC)","title":"Problem setup","text":"","category":"section"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"In this module, we do a linear stability analysis of a 2D rotating Rayleigh-Bernard case where the domain is periodic in the y-direction, in the x-direction is of infinite extent and vertically bounded. The reason to choose this simple case is because we can find an analytical solution for this case. The background temperature profile is given by ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"overlinetheta = 1 - z","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"The non-dimensional form of the equations governing the perturbation is given by ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"    fracEPr fracpartial mathbfupartial t \n    + hatz times mathbfu =\n    -nabla p + Ra theta hatz + E nabla^2 mathbfu","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"    fracpartial thetapartial t \n    = mathbfu cdot hatz + nabla^2 theta","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"    nabla cdot mathbfu = 0","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"where E=\\nu/(fH^2) is the Ekman number and Ra = g\\alpha \\Delta T/(f \\kappa), \\Delta T is the temperature difference between the bottom and the top walls) is the modified Rayleigh number. By applying the operators (\\nabla \\times \\nabla \\times) and (\\nabla \\times) and taking the z-component of the equations and assuming wave-like perturbations as done previously, we obtained the equations for vertical velocity w^, vertical vorticity \\zeta and temperature \\theta,","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    E mathcalD^4 w - partial_z zeta = -Ra mathcalD_h^2 theta\n\n    E mathcalD^2 zeta + partial_z w = 0\n\n    mathcalD^2 b + w = 0\nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"The boundary conditions are: ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    w = partial_z^2 w = partial_z zeta = theta = 0\n     textat  z=01\nendalign","category":"page"},{"location":"modules/rRBC.html#Normal-mode","page":"rotating Rayleigh Benard convection (rRBC)","title":"Normal mode","text":"","category":"section"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"Next we consider normal-mode perturbation solutions in the form of (we seek stationary solutions at the marginal state, i.e., \\sigma = 0),","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    w zeta theta(xyzt) =\nmathfrakRbig(tildew  tildezeta  tildetheta(y z)  e^i k x + sigma tbig)\nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"where the symbol mathfrakR denotes the real part and a variable with `tilde' denotes an eigenfunction.  Finally following systems of differential equations are obtained,","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    E mathcalD^4  tildew - partial_z tildezeta = - Ra mathcalD_h^2 tildetheta\n\n    E mathcalD^2 tildezeta + partial_z tildew = 0\n\n    mathcalD^2 tildetheta + tildew = 0 \nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"where ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"mathcalD^4  = (mathcalD^2 )^2 = big(partial_y^2 + partial_z^2 - k^2big)^2  textand  mathcalD_h^2 = (partial_y^2 - k^2)","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"The eigenfunctions tildeu, tildev are related to tildew, tildezeta by the relations ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    -mathcalD_h^2 tildeu = i k partial_z tildew + partial_y tildezeta\n   \n    -mathcalD_h^2 tildev = partial_yz tildew -  i k tildezeta\nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"We choose periodic boundary conditions in the y-direction and free-slip, rigid lid, with zero buoyancy flux in the z direction, i.e., ","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    tildew = partial_zz tildew = \n    partial_z tildezeta = partial_z tildeb = 0 \n     textat  z=0 1\nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"The above sets of equations with the boundary conditions can be expressed as a standard generalized eigenvalue problem,","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"beginalign\n    mathsfitA mathsfX= lambda mathsfitB mathsfX   \nendalign","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"where \\lambda=Ra is the eigenvalue. ","category":"page"},{"location":"modules/rRBC.html#Result","page":"rotating Rayleigh Benard convection (rRBC)","title":"Result","text":"","category":"section"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"For the parameter of E=10^{-4}, the obtained critical Rayleigh number Ra_c=1897 (matched with [chandrashekar]) analysis for horizontally infinite domain). Due to the finite aspect ratio, our stability analysis shows a finite number of convective rolls (below figure shows vertical velocity w) with y-wavenumber m_c=28, i.e., there are 28 pairs of rolls in the y-direction (below figure). According to [chandrashekar] analysis, the resultant wavenumber a_c=2802 for this parameter regime, and it can be shown that for a finite L_x, the resultant wavenumber a is related as","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"    a^2 = Big( frac2mpiL_y Big)^2 + k^2","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"where k is the x-wavenumber and in this analysis k=0.  So for L_y=2\\pi and a_c=28.02, we obtained m approx 28 which we also get from stability analysis.","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"(Image: Alt text)","category":"page"},{"location":"modules/rRBC.html","page":"rotating Rayleigh Benard convection (rRBC)","title":"rotating Rayleigh Benard convection (rRBC)","text":"[chandrashekar]: Chandrasekhar, S., 2013. Hydrodynamic and hydromagnetic stability. Courier Corporation.","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"\"\"\"\nStability of a 2D front based on Stone (1971)\n\"\"\"\n# load required packages\nusing LazyGrids\nusing LinearAlgebra\nusing Printf\nusing StaticArrays\nusing SparseArrays\nusing SparseMatrixDicts\nusing FillArrays\nusing SpecialFunctions\nusing Parameters\nusing Test\nusing BenchmarkTools\n\nusing JLD2\nusing ModelingToolkit\nusing NonlinearSolve\n\nusing BiGSTARS\nusing BiGSTARS : FourierDiff, cheb_coord_transform_ho,\n\n@with_kw mutable struct TwoDimGrid{Ny, Nz}\n    y = @SVector zeros(Float64, Ny)\n    z = @SVector zeros(Float64, Nz)\nend\n\n@with_kw mutable struct ChebMarix{Ny, Nz}\n    ùíü ∏::Array{Float64,  2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n    ùíü¬≤ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n    ùíü‚Å¥ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n\n    ùíü·∂ª::Array{Float64,  2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n\n    ùíü·∂ª·¥∫::Array{Float64,  2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n\n    ùíü·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\nend\n\n@with_kw mutable struct Operator{N}\n\"\"\"\n    `subperscript with N' means Operator with Neumann boundary condition\n        after kronker product\n    `subperscript with D' means Operator with Dirchilet boundary condition\n        after kronker product\n\"\"\"\n\n    ùíü ∏::Array{Float64,  2}   = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª·¥∫::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü ∏·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü ∏¬≤·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤ ∏¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\nend\n\n@with_kw mutable struct MeanFlow{N}\n    B‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n    U‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n\n  ‚àá ∏U‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n  ‚àá·∂ªU‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n  ‚àá ∏B‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n  ‚àá·∂ªB‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n\n  ‚àá ∏ ∏U‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n  ‚àá·∂ª·∂ªU‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\n  ‚àá ∏·∂ªU‚ÇÄ::Array{Float64, 2} = SparseMatrixCSC(Zeros(N, N))\nend","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"function Construct_DerivativeOperator!(diffMatrix, grid, params)     N = params.Ny * params.Nz","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"y1, diffMatrix.ùíü ∏  = FourierDiff(params.Ny, 1)\ny2, d2y = FourierDiff(params.Ny, 2)\ndiffMatrix.ùíü¬≤ ∏ = d2y\n# y4, d4y = FourierDiff(params.Ny, 4)\n# diffMatrix.ùíü‚Å¥ ∏ = d4y\n\n# Transform the domain and derivative operators from [0, 2œÄ) ‚Üí [0, L)\ngrid.y         = params.L/2œÄ  * y1\ndiffMatrix.ùíü ∏  = (2œÄ/params.L)^1 * diffMatrix.ùíü ∏\ndiffMatrix.ùíü¬≤ ∏ = (2œÄ/params.L)^2 * diffMatrix.ùíü¬≤ ∏\ndiffMatrix.ùíü‚Å¥ ∏ = (2œÄ/params.L)^4 * diffMatrix.ùíü‚Å¥ ∏\n\nz1,  D1z = chebdif(params.Nz, 1)\nz2,  D2z = chebdif(params.Nz, 2)\nz3,  D3z = chebdif(params.Nz, 3)\nz4,  D4z = chebdif(params.Nz, 4)\n\n## Transform the domain and derivative operators from [-1, 1] ‚Üí [0, H]\ngrid.z, diffMatrix.ùíü·∂ª, diffMatrix.ùíü¬≤·∂ª  = chebder_transform(z1,  D1z,\n                                                                D2z,\n                                                                zerotoL_transform,\n                                                                params.H)\np1, q1, diffMatrix.ùíü‚Å¥·∂ª = chebder_transform_ho(z1, D1z,\n                                                D2z,\n                                                D3z,\n                                                D4z,\n                                                zerotoL_transform_ho,\n                                                params.H)\n\nreturn nothing","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"end","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"function ImplementBCs_cheb!(Op, diffMatrix, params)     I ∏ = sparse(Matrix(1.0I, params.Ny, params.Ny))     I·∂ª = sparse(Matrix(1.0I, params.Nz, params.Nz))","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"# Cheb matrix with Dirichilet boundary condition\n@. diffMatrix.ùíü·∂ª·¥∞  = diffMatrix.ùíü·∂ª\n@. diffMatrix.ùíü¬≤·∂ª·¥∞ = diffMatrix.ùíü¬≤·∂ª\n@. diffMatrix.ùíü‚Å¥·∂ª·¥∞ = diffMatrix.ùíü‚Å¥·∂ª\n\n# Cheb matrix with Neumann boundary condition\n@. diffMatrix.ùíü·∂ª·¥∫  = diffMatrix.ùíü·∂ª\n@. diffMatrix.ùíü¬≤·∂ª·¥∫ = diffMatrix.ùíü¬≤·∂ª\n\nn = params.Nz\nfor iter ‚àà 1:n-1\n    diffMatrix.ùíü‚Å¥·∂ª·¥∞[1,iter+1] = (diffMatrix.ùíü‚Å¥·∂ª·¥∞[1,iter+1] +\n                            -1.0 * diffMatrix.ùíü‚Å¥·∂ª·¥∞[1,1] * diffMatrix.ùíü¬≤·∂ª·¥∞[1,iter+1])\n\n      diffMatrix.ùíü‚Å¥·∂ª·¥∞[n,iter] = (diffMatrix.ùíü‚Å¥·∂ª·¥∞[n,iter] +\n                            -1.0 * diffMatrix.ùíü‚Å¥·∂ª·¥∞[n,n] * diffMatrix.ùíü¬≤·∂ª·¥∞[n,iter])\nend\n\ndiffMatrix.ùíü·∂ª·¥∞[1,1]  = 0.0\ndiffMatrix.ùíü·∂ª·¥∞[n,n]  = 0.0\n\ndiffMatrix.ùíü¬≤·∂ª·¥∞[1,1] = 0.0\ndiffMatrix.ùíü¬≤·∂ª·¥∞[n,n] = 0.0\n\ndiffMatrix.ùíü‚Å¥·∂ª·¥∞[1,1] = 0.0\ndiffMatrix.ùíü‚Å¥·∂ª·¥∞[n,n] = 0.0\n\n# Neumann boundary condition\n@. diffMatrix.ùíü·∂ª·¥∫  = diffMatrix.ùíü·∂ª\n@. diffMatrix.ùíü¬≤·∂ª·¥∫ = diffMatrix.ùíü¬≤·∂ª\nfor iter ‚àà 1:n-1\n    diffMatrix.ùíü¬≤·∂ª·¥∫[1,iter+1] = (diffMatrix.ùíü¬≤·∂ª·¥∫[1,iter+1] +\n                            -1.0 * diffMatrix.ùíü¬≤·∂ª·¥∫[1,1] * diffMatrix.ùíü·∂ª·¥∫[1,iter+1]/diffMatrix.ùíü·∂ª·¥∫[1,1])\n\n    diffMatrix.ùíü¬≤·∂ª·¥∫[n,iter]   = (diffMatrix.ùíü¬≤·∂ª·¥∫[n,iter] +\n                            -1.0 * diffMatrix.ùíü¬≤·∂ª·¥∫[n,n] * diffMatrix.ùíü·∂ª·¥∫[n,iter]/diffMatrix.ùíü·∂ª·¥∫[n,n])\nend\n\ndiffMatrix.ùíü¬≤·∂ª·¥∫[1,1] = 0.0\ndiffMatrix.ùíü¬≤·∂ª·¥∫[n,n] = 0.0\n\n@. diffMatrix.ùíü·∂ª·¥∫[1,1:end] = 0.0\n@. diffMatrix.ùíü·∂ª·¥∫[n,1:end] = 0.0\n\n#setBCs!(diffMatrix, params, \"dirchilet\")\n#setBCs!(diffMatrix, params, \"neumann\"  )\n\nkron!( Op.ùíü·∂ª·¥∞  ,  I ∏ , diffMatrix.ùíü·∂ª·¥∞  )\nkron!( Op.ùíü¬≤·∂ª·¥∞ ,  I ∏ , diffMatrix.ùíü¬≤·∂ª·¥∞ )\nkron!( Op.ùíü‚Å¥·∂ª·¥∞ ,  I ∏ , diffMatrix.ùíü‚Å¥·∂ª·¥∞ )\n\nkron!( Op.ùíü·∂ª·¥∫  ,  I ∏ , diffMatrix.ùíü·∂ª·¥∫ )\nkron!( Op.ùíü¬≤·∂ª·¥∫ ,  I ∏ , diffMatrix.ùíü¬≤·∂ª·¥∫)\n\nkron!( Op.ùíü ∏   ,  diffMatrix.ùíü ∏  ,  I·∂ª )\nkron!( Op.ùíü¬≤ ∏  ,  diffMatrix.ùíü¬≤ ∏ ,  I·∂ª )\nkron!( Op.ùíü‚Å¥ ∏  ,  diffMatrix.ùíü‚Å¥ ∏ ,  I·∂ª )\n\nkron!( Op.ùíü ∏·∂ª·¥∞   ,  diffMatrix.ùíü ∏  ,  diffMatrix.ùíü·∂ª·¥∞  )\nkron!( Op.ùíü ∏¬≤·∂ª·¥∞  ,  diffMatrix.ùíü ∏  ,  diffMatrix.ùíü¬≤·∂ª·¥∞ )\nkron!( Op.ùíü¬≤ ∏¬≤·∂ª·¥∞ ,  diffMatrix.ùíü¬≤ ∏ ,  diffMatrix.ùíü¬≤·∂ª·¥∞ )\n\nreturn nothing","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"end","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"function BasicState!(diffMatrix, mf, grid, params)     Y, Z = ndgrid(grid.y, grid.z)     Y    = transpose(Y)     Z    = transpose(Z)","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"# imposed buoyancy profile\nB‚ÇÄ   = @. 1.0/params.Œì * Z - Y\n‚àÇ ∏B‚ÇÄ = - 1.0 .* ones(size(Y))\n‚àÇ·∂ªB‚ÇÄ = 1.0/params.Œì .* ones(size(Y))\n\nU‚ÇÄ      = @. 1.0 * Z - 0.5params.H\n‚àÇ·∂ªU‚ÇÄ    = ones( size(Y))\n‚àÇ ∏U‚ÇÄ    = zeros(size(Y))\n\n‚àÇ ∏ ∏U‚ÇÄ   = zeros(size(Y))\n‚àÇ ∏·∂ªU‚ÇÄ   = zeros(size(Y))\n‚àÇ·∂ª·∂ªU‚ÇÄ   = zeros(size(Y))\n\n  B‚ÇÄ  = B‚ÇÄ[:];\n  U‚ÇÄ  = U‚ÇÄ[:];\n‚àÇ ∏B‚ÇÄ  = ‚àÇ ∏B‚ÇÄ[:];\n‚àÇ·∂ªB‚ÇÄ  = ‚àÇ·∂ªB‚ÇÄ[:];\n\n‚àÇ·∂ªU‚ÇÄ  = ‚àÇ·∂ªU‚ÇÄ[:];\n‚àÇ ∏U‚ÇÄ  = ‚àÇ ∏U‚ÇÄ[:];\n\n‚àÇ ∏ ∏U‚ÇÄ = ‚àÇ ∏ ∏U‚ÇÄ[:];\n‚àÇ ∏·∂ªU‚ÇÄ = ‚àÇ ∏·∂ªU‚ÇÄ[:];\n‚àÇ·∂ª·∂ªU‚ÇÄ = ‚àÇ·∂ª·∂ªU‚ÇÄ[:];\n\nmf.B‚ÇÄ[diagind(mf.B‚ÇÄ)] = B‚ÇÄ\nmf.U‚ÇÄ[diagind(mf.U‚ÇÄ)] = U‚ÇÄ\n\nmf.‚àá·∂ªU‚ÇÄ[diagind(mf.‚àá·∂ªU‚ÇÄ)] = ‚àÇ·∂ªU‚ÇÄ\nmf.‚àá ∏U‚ÇÄ[diagind(mf.‚àá ∏U‚ÇÄ)] = ‚àÇ ∏U‚ÇÄ\n\nmf.‚àá ∏B‚ÇÄ[diagind(mf.‚àá ∏B‚ÇÄ)] = ‚àÇ ∏B‚ÇÄ\nmf.‚àá·∂ªB‚ÇÄ[diagind(mf.‚àá·∂ªB‚ÇÄ)] = ‚àÇ·∂ªB‚ÇÄ\n\nmf.‚àá ∏ ∏U‚ÇÄ[diagind(mf.‚àá ∏ ∏U‚ÇÄ)] = ‚àÇ ∏ ∏U‚ÇÄ;\nmf.‚àá·∂ª·∂ªU‚ÇÄ[diagind(mf.‚àá·∂ª·∂ªU‚ÇÄ)] = ‚àÇ·∂ª·∂ªU‚ÇÄ;\nmf.‚àá ∏·∂ªU‚ÇÄ[diagind(mf.‚àá ∏·∂ªU‚ÇÄ)] = ‚àÇ ∏·∂ªU‚ÇÄ;\n\nreturn nothing","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"end","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"function construct_matrices(Op, mf, grid, params)\n    Y, Z = ndgrid(grid.y, grid.z)\n    Y    = transpose(Y)\n    Z    = transpose(Z)\n\n    # basic state\n    B‚ÇÄ   = @. 1.0/params.Œì * Z - Y\n    ‚àÇ ∏B‚ÇÄ = - 1.0 .* ones(size(Y))\n    ‚àÇ·∂ªB‚ÇÄ = 1.0/params.Œì .* ones(size(Y))\n\n    U‚ÇÄ      = @. 1.0 * Z - 0.5params.H\n    ‚àÇ·∂ªU‚ÇÄ    = ones( size(Y))\n    ‚àÇ ∏U‚ÇÄ    = zeros(size(Y))\n\n    ‚àÇ ∏ ∏U‚ÇÄ   = zeros(size(Y))\n    ‚àÇ ∏·∂ªU‚ÇÄ   = zeros(size(Y))\n    ‚àÇ·∂ª·∂ªU‚ÇÄ   = zeros(size(Y))\n\n      B‚ÇÄ  = B‚ÇÄ[:];\n      U‚ÇÄ  = U‚ÇÄ[:];\n    ‚àÇ ∏B‚ÇÄ  = ‚àÇ ∏B‚ÇÄ[:];\n    ‚àÇ·∂ªB‚ÇÄ  = ‚àÇ·∂ªB‚ÇÄ[:];\n\n    ‚àÇ·∂ªU‚ÇÄ  = ‚àÇ·∂ªU‚ÇÄ[:];\n    ‚àÇ ∏U‚ÇÄ  = ‚àÇ ∏U‚ÇÄ[:];\n\n    ‚àÇ ∏ ∏U‚ÇÄ = ‚àÇ ∏ ∏U‚ÇÄ[:];\n    ‚àÇ ∏·∂ªU‚ÇÄ = ‚àÇ ∏·∂ªU‚ÇÄ[:];\n    ‚àÇ·∂ª·∂ªU‚ÇÄ = ‚àÇ·∂ª·∂ªU‚ÇÄ[:];\n\n    mf.B‚ÇÄ[diagind(mf.B‚ÇÄ)] = B‚ÇÄ\n    mf.U‚ÇÄ[diagind(mf.U‚ÇÄ)] = U‚ÇÄ\n\n    mf.‚àá·∂ªU‚ÇÄ[diagind(mf.‚àá·∂ªU‚ÇÄ)] = ‚àÇ·∂ªU‚ÇÄ\n    mf.‚àá ∏U‚ÇÄ[diagind(mf.‚àá ∏U‚ÇÄ)] = ‚àÇ ∏U‚ÇÄ\n\n    mf.‚àá ∏B‚ÇÄ[diagind(mf.‚àá ∏B‚ÇÄ)] = ‚àÇ ∏B‚ÇÄ\n    mf.‚àá·∂ªB‚ÇÄ[diagind(mf.‚àá·∂ªB‚ÇÄ)] = ‚àÇ·∂ªB‚ÇÄ\n\n    mf.‚àá ∏ ∏U‚ÇÄ[diagind(mf.‚àá ∏ ∏U‚ÇÄ)] = ‚àÇ ∏ ∏U‚ÇÄ;\n    mf.‚àá·∂ª·∂ªU‚ÇÄ[diagind(mf.‚àá·∂ª·∂ªU‚ÇÄ)] = ‚àÇ·∂ª·∂ªU‚ÇÄ;\n    mf.‚àá ∏·∂ªU‚ÇÄ[diagind(mf.‚àá ∏·∂ªU‚ÇÄ)] = ‚àÇ ∏·∂ªU‚ÇÄ;\n\n    N  = params.Ny * params.Nz\n    I‚Å∞ = sparse(Matrix(1.0I, N, N)) #Eye{Float64}(N)\n    s‚ÇÅ = size(I‚Å∞, 1); s‚ÇÇ = size(I‚Å∞, 2)\n\n    # allocating memory for the LHS and RHS matrices\n    ùìõ‚ÇÅ = SparseMatrixCSC(Zeros{ComplexF64}(s‚ÇÅ, 3s‚ÇÇ))\n    ùìõ‚ÇÇ = SparseMatrixCSC(Zeros{ComplexF64}(s‚ÇÅ, 3s‚ÇÇ))\n    ùìõ‚ÇÉ = SparseMatrixCSC(Zeros{ComplexF64}(s‚ÇÅ, 3s‚ÇÇ))\n\n    ‚Ñ≥‚ÇÅ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ‚Ñ≥‚ÇÇ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ‚Ñ≥‚ÇÉ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n\n    ‚àá‚Çï¬≤ = SparseMatrixCSC(Zeros(N, N))\n    H   = SparseMatrixCSC(Zeros(N, N))\n\n    ‚àá‚Çï¬≤ = (1.0 * Op.ùíü¬≤ ∏ - 1.0 * params.k‚Çì^2 * I‚Å∞)\n\n\n    H = inverse_Lap_hor(‚àá‚Çï¬≤)\n    @assert norm(‚àá‚Çï¬≤ * H - I‚Å∞) ‚â§ 1.0e-4 \"difference in L2-norm should be small\"\n\n\n    D‚Å¥  = (1.0 * Op.ùíü‚Å¥ ∏\n        + 1.0/params.Œµ^4 * Op.ùíü‚Å¥·∂ª·¥∞\n        + 1.0params.k‚Çì^4 * I‚Å∞\n        - 2.0params.k‚Çì^2 * Op.ùíü¬≤ ∏\n        - 2.0/params.Œµ^2 * params.k‚Çì^2 * Op.ùíü¬≤·∂ª·¥∞\n        + 2.0/params.Œµ^2 * Op.ùíü¬≤ ∏¬≤·∂ª·¥∞)\n\n    D¬≤  = (1.0/params.Œµ^2 * Op.ùíü¬≤·∂ª·¥∞ + 1.0 * ‚àá‚Çï¬≤)\n    D‚Çô¬≤ = (1.0/params.Œµ^2 * Op.ùíü¬≤·∂ª·¥∫ + 1.0 * ‚àá‚Çï¬≤)\n\n    # 1. u·∂ª (vertical velocity)  equation (bcs: u·∂ª = ‚àÇ·∂ª·∂ªu·∂ª = 0 @ z = 0, 1)\n    ùìõ‚ÇÅ[:,    1:1s‚ÇÇ] = (-1.0params.E * D‚Å¥\n                    + 1.0im * params.k‚Çì * mf.U‚ÇÄ * D¬≤) * params.Œµ^2\n    ùìõ‚ÇÅ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * Op.ùíü·∂ª·¥∫\n    ùìõ‚ÇÅ[:,2s‚ÇÇ+1:3s‚ÇÇ] = -1.0 * ‚àá‚Çï¬≤\n\n    # 2. œâ·∂ª (vertical vorticity) equation (bcs: ‚àÇ·∂ªœâ·∂ª = 0 @ z = 0, 1)\n    ùìõ‚ÇÇ[:,    1:1s‚ÇÇ] = - 1.0 * mf.‚àá·∂ªU‚ÇÄ * Op.ùíü ∏ - 1.0 * Op.ùíü·∂ª·¥∞\n    ùìõ‚ÇÇ[:,1s‚ÇÇ+1:2s‚ÇÇ] = (1.0im * params.k‚Çì * mf.U‚ÇÄ * I‚Å∞\n                    - 1.0params.E * D‚Çô¬≤)\n    ùìõ‚ÇÇ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 0.0 * I‚Å∞\n\n    # 3. b (buoyancy) equation (bcs: b = 0 @ z = 0, 1)\n    ùìõ‚ÇÉ[:,    1:1s‚ÇÇ] = (1.0 * mf.‚àá·∂ªB‚ÇÄ * I‚Å∞\n                    - 1.0 * mf.‚àá ∏B‚ÇÄ * H * Op.ùíü ∏·∂ª·¥∞)\n    ùìõ‚ÇÉ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0im * params.k‚Çì * mf.‚àá ∏B‚ÇÄ * H * I‚Å∞\n    ùìõ‚ÇÉ[:,2s‚ÇÇ+1:3s‚ÇÇ] = (-1.0params.E * D‚Çô¬≤\n                    + 1.0im * params.k‚Çì * mf.U‚ÇÄ * I‚Å∞)\n\n    ùìõ = ([ùìõ‚ÇÅ; ùìõ‚ÇÇ; ùìõ‚ÇÉ]);\n\n\n    cnst = -1.0\n    ‚Ñ≥‚ÇÅ[:,    1:1s‚ÇÇ] = 1.0cnst * params.Œµ^2 * D¬≤;\n    ‚Ñ≥‚ÇÇ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0cnst * I‚Å∞;\n    ‚Ñ≥‚ÇÉ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0cnst * I‚Å∞;\n    ‚Ñ≥ = ([‚Ñ≥‚ÇÅ; ‚Ñ≥‚ÇÇ; ‚Ñ≥‚ÇÉ])\n\n    return ùìõ, ‚Ñ≥\nend","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"Parameters:","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"@with_kw mutable struct Params{T<:Real} @deftype T\n    L::T        = 1.0        # horizontal domain size\n    H::T        = 1.0        # vertical domain size\n    Œì::T        = 0.1        # front strength Œì ‚â° M¬≤/f¬≤ = Œª/H = 1/Œµ ‚Üí Œµ = 1/Œì\n    Œµ::T        = 0.1        # aspect ratio Œµ ‚â° H/L\n    k‚Çì::T       = 0.0        # x-wavenumber\n    E::T        = 1.0e-9     # Ekman number\n    Ny::Int64   = 48         # no. of y-grid points\n    Nz::Int64   = 24         # no. of z-grid points\n    method::String = \"krylov\"\nend\n\n\nfunction EigSolver(Op, mf, grid, params, œÉ‚ÇÄ)\n\n    ùìõ, ‚Ñ≥ = construct_matrices(Op, mf, grid, params)\n\n    N = params.Ny * params.Nz\n    MatrixSize = 3N\n    @assert size(ùìõ, 1)  == MatrixSize &&\n            size(ùìõ, 2)  == MatrixSize &&\n            size(‚Ñ≥, 1)  == MatrixSize &&\n            size(‚Ñ≥, 2)  == MatrixSize \"matrix size does not match!\"\n\n    if params.method == \"shift_invert\"\n        Œª‚Çõ = EigSolver_shift_invert( ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ‚ÇÄ)\n\n    elseif params.method == \"krylov\"\n\n        Œª‚Çõ, Œß = EigSolver_shift_invert_krylov( ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ‚ÇÄ, maxiter=40, which=:LR)\n\n\n    elseif params.method == \"arnoldi\"\n\n        Œª‚Çõ, Œß = EigSolver_shift_invert_arnoldi( ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ‚ÇÄ, maxiter=40, which=:LR)\n    end","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"======================================================================","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"    @assert length(Œª‚Çõ) > 0 \"No eigenvalue(s) found!\"\n\n    @printf \"||ùìõŒß - Œª‚Çõ‚Ñ≥Œß||‚ÇÇ: %f \\n\" norm(ùìõ * Œß[:,1] - Œª‚Çõ[1] * ‚Ñ≥ * Œß[:,1])\n\n    @printf \"largest growth rate : %1.4e%+1.4eim\\n\" real(Œª‚Çõ[1]) imag(Œª‚Çõ[1])\n\n    return Œª‚Çõ[1] #, Œß[:,1]\nend\n\n\nfunction solve_Stone1971(k‚Çì::Float64=0.0)\n    params      = Params{Float64}(k‚Çì=0.5)\n    grid        = TwoDimGrid{params.Ny,  params.Nz}()\n    diffMatrix  = ChebMarix{ params.Ny,  params.Nz}()\n    Op          = Operator{params.Ny * params.Nz}()\n    mf          = MeanFlow{params.Ny * params.Nz}()\n\n    Construct_DerivativeOperator!(diffMatrix, grid, params)\n    ImplementBCs_cheb!(Op, diffMatrix, params)\n\n    œÉ‚ÇÄ   = 0.01\n    params.k‚Çì = k‚Çì\n\n    Œª‚Çõ = EigSolver(Op, mf, grid, params, œÉ‚ÇÄ)\n\n    # Analytical solution of Stone (1971) for the growth rate\n    cnst = 1.0 + 1.0/params.Œì + 5.0*params.Œµ^2 * params.k‚Çì^2/42.0\n    Œª‚Çõ‚Çú = 1.0/(2.0*‚àö3.0) * (params.k‚Çì - 2.0/15.0 * params.k‚Çì^3 * cnst)\n\n    return abs(Œª‚Çõ.re - Œª‚Çõ‚Çú) < 1e-3\n\nend\n\nsolve_Stone1971(0.1)\n\nprintln(\"Example runs OK\")","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"","category":"page"},{"location":"literated/Stone1971.html","page":"Stone1971","title":"Stone1971","text":"This page was generated using Literate.jl.","category":"page"},{"location":"contributing.html#Contributors'-Guide","page":"Contributor's Guide","title":"Contributors' Guide","text":"","category":"section"},{"location":"contributing.html","page":"Contributor's Guide","title":"Contributor's Guide","text":"This is a short guide for potential BiGSTARS.jl contributors.","category":"page"},{"location":"contributing.html","page":"Contributor's Guide","title":"Contributor's Guide","text":"Please feel free to ask us questions and chat, either by raising an issue or starting a discussion.","category":"page"},{"location":"contributing.html","page":"Contributor's Guide","title":"Contributor's Guide","text":"We follow the ColPrac guide for collaborative practices.  New contributors should make sure to read that guide.","category":"page"},{"location":"modules/Ou1971.html#Baroclinic-instability","page":"-","title":"Baroclinic instability","text":"","category":"section"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"The resulting nondimensional, linearized Boussinesq equations of motion under the f-plane approximation are given by","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    fracD mathbfuDt\n    + Big(v fracpartial Upartial y + w fracpartial Upartial z Big) hatx\n    + hatz times mathbfu =\n    -nabla p + frac1epsilon b hatz + E nabla^2 mathbfu \n    fracDbDt\n    +  v fracpartial Bpartial y + w fracpartial Bpartial z = fracEPr nabla^2 b \n    nabla cdot mathbfu = 0\nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"DDt equiv partialpartial t + U (partialpartial x)","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"is the material derivative, mathbfu equiv (u v epsilon w) is the velocity perturbation, epsilon=HR is the aspect ratio, p is the pressure perturbation, and b is the buoyancy perturbation. The operator ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"nabla equiv (partialpartial x partialpartial y (1epsilon) partialpartial z)","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"nabla^2 equiv partial^2partial x^2 + partial^2partial y^2 + (1epsilon^2) partial^2 partial z^2","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"nabla_h^2 equiv partial^2 partial x^2 + partial^2partial y^2","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"To eliminate pressure, following [teed2010rapidly@citet, we apply the operator hatz cdot nabla times nabla times  and hatz cdot nabla times to the above momentum equation. This procedure yields governing equations of three perturbation variables, the vertical velocity w, the vertical vorticity zeta  (=hatz cdot nabla times mathbfu), and the buoyancy b ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    fracDDtnabla^2 w \n    + frac1epsilon^2 fracpartial zetapartial z \n    = frac1epsilon^2 nabla_h^2 b + E nabla^4 w\n\n    fracD zetaDt\n    - fracpartial Upartial zfracpartial wpartial y\n    - fracpartial wpartial z = E nabla^2 zeta \n\n    fracDbDt\n    + v fracpartial Bpartial y + \n    w fracpartial Bpartial z\n    = fracEPr nabla^2 b\nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"nabla_h^2 equiv partial^2 partial x^2 + partial^2partial y^2","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"The benefit of using the above sets of equations is that it enables us to examine the instability at an along-front wavenumber k to 0.  The horizontal velocities u and v are related to the vertical velocity w and vertical vorticity zeta by the identities, ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    nabla_h^2 u = -fracpartial zetapartial y - fracpartial^2 wpartial x partial z \n\n    nabla_h^2 v = fracpartial zetapartial x - fracpartial^2 wpartial y partial z    \nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"In deriving the above equations, we make use of the continuity equation and the definition of vertical vorticity zeta.","category":"page"},{"location":"modules/Ou1971.html#Normal-mode","page":"-","title":"Normal mode","text":"","category":"section"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"Next we consider normal-mode perturbation solutions in the form of ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    w zeta b(xyzt) = mathfrakRbig(tildew  tildezeta  tildeb(y z)  e^i kx + sigma tbig)\nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where the symbol mathfrakR denotes the real part and a variable with tilde' denotes an eigenfunction. The variable\\sigma=\\sigma_r + i \\sigma_i`. The real part represents the growth rate, and the imaginary part  shows the frequency of the  perturbation. ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"Finally following systems of differential equations are obtained,","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    (i k U - E mathcalD^2) mathcalD^2 tildew\n    + epsilon^-2 partial_z tildezeta\n    - epsilon^-2 mathcalD_h^2 tildeb = -sigma mathcalD^2 tildew\n\n    - partial_z U partial_y tildew\n    - partial_z tildew\n    + left(ik U - E mathcalD^2 right) tildezeta = -sigma tildezeta\n\n    partial_z B tildew + partial_y B  tildev + \n    leftik U - E mathcalD^2 right tildeb = -sigma tildeb \nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"mathcalD^4  = (mathcalD^2 )^2 = big(partial_y^2 +\n(1epsilon^2)partial_z^2 - k^2big)^2  textand  mathcalD_h^2 = (partial_y^2 - k^2)","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"The eigenfunctions tildeu, tildev are related to tildew, tildezeta by the relations ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    -mathcalD_h^2 tildeu = i k partial_z tildew + partial_y tildezeta\n   \n    -mathcalD_h^2 tildev = partial_yz tildew -  i k tildezeta\nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"We choose periodic boundary conditions in the y-direction and free-slip, rigid lid, with zero buoyancy flux in the z direction, i.e., ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    tildew = partial_zz tildew = \n    partial_z tildezeta = partial_z tildeb = 0 \n     textat  z=0 1\nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"The above sets of equations with the boundary conditions can be expressed as a standard generalized eigenvalue problem,","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"beginalign\n    mathsfitA mathsfX= sigma mathsfitB mathsfX   \nendalign","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"where sigma is the eigenvalue, mathsfX=tildew tildezeta tildeb^T is the eigenvector and the matrices mathsfitA, mathsfitB are the complex and real non-symmetric matrices, respectively. ","category":"page"},{"location":"modules/Ou1971.html","page":"-","title":"-","text":"(Image: Alt text)","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"\"\"\"\nThis code finds critical Rayleigh number for rotating Rayleigh Benrad Convection (rRBC)\nwhere the domain is periodic in y-direction.\nThe code is benchmarked against Chandrashekar's theoretical results.\nHydrodynamic and hydromagnetic stability by S. Chandrasekhar, 1961 (page no-95)\nparameter: Ek (Ekman number) = 10‚Åª‚Å¥\neigenvalue: critical modified Rayleigh number (Ra·∂ú) = 189.7\n\"\"\"\n# load required packages\nusing LazyGrids\nusing LinearAlgebra\nusing Printf\nusing StaticArrays\nusing SparseArrays\nusing SparseMatrixDicts\nusing FillArrays\nusing SpecialFunctions\nusing Parameters\nusing Test\nusing BenchmarkTools\n\nusing ArnoldiMethod: partialschur, partialeigen, LR, LI, LM, SR\n\nusing BiGSTARS\n\n@with_kw mutable struct TwoDimGrid{Ny, Nz}\n    y = @SVector zeros(Float64, Ny)\n    z = @SVector zeros(Float64, Nz)\nend\n\n@with_kw mutable struct ChebMarix{Ny, Nz}\n    ùíü ∏::Array{Float64,  2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n    ùíü¬≤ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n    ùíü‚Å¥ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Ny, Ny))\n\n    ùíü·∂ª::Array{Float64,  2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª::Array{Float64, 2}   = SparseMatrixCSC(Zeros(Nz, Nz))\n\n    ùíü·∂ª·¥∫::Array{Float64,  2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n\n    ùíü·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\n    ùíü‚Å¥·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))\nend\n\n@with_kw mutable struct Operator{N}\n\"\"\"\n    `subperscript with N' means Operator with Neumann boundary condition\n        after kronker product\n    `subperscript with D' means Operator with Dirchilet boundary condition\n        after kronker product\n\"\"\"\n\n    ùíü ∏::Array{Float64,  2}   = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥ ∏::Array{Float64, 2}   = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª·¥∫::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥·∂ª·¥∫::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü ∏·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü‚Å¥·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\n\n    ùíü ∏¬≤·∂ª·¥∞::Array{Float64,  2}  = SparseMatrixCSC(Zeros(N, N))\n    ùíü¬≤ ∏¬≤·∂ª·¥∞::Array{Float64, 2}  = SparseMatrixCSC(Zeros(N, N))\nend","category":"page"},{"location":"literated/rRBC.html#Construct-the-derivative-operator","page":"rRBC","title":"Construct the derivative operator","text":"","category":"section"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"function Construct_DerivativeOperator!(diffMatrix, grid, params)     N = params.Ny * params.Nz","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"# ------------- setup differentiation matrices  -------------------\n# Fourier in y-direction: y ‚àà [0, L)\ny1, diffMatrix.ùíü ∏  = FourierDiff(params.Ny, 1)\n_,  diffMatrix.ùíü¬≤ ∏ = FourierDiff(params.Ny, 2)\n_,  diffMatrix.ùíü‚Å¥ ∏ = FourierDiff(params.Ny, 4)\n\n# Transform the domain and derivative operators from [0, 2œÄ) ‚Üí [0, L)\ngrid.y         = params.L/2œÄ  * y1\ndiffMatrix.ùíü ∏  = (2œÄ/params.L)^1 * diffMatrix.ùíü ∏\ndiffMatrix.ùíü¬≤ ∏ = (2œÄ/params.L)^2 * diffMatrix.ùíü¬≤ ∏\ndiffMatrix.ùíü‚Å¥ ∏ = (2œÄ/params.L)^4 * diffMatrix.ùíü‚Å¥ ∏\n\n#@assert maximum(grid.y) ‚âà params.L && minimum(grid.y) ‚âà 0.0\n\n# Chebyshev in the z-direction\nz, diffMatrix.ùíü·∂ª  = cheb(params.Nz-1)\ngrid.z = z\ndiffMatrix.ùíü¬≤·∂ª = diffMatrix.ùíü·∂ª  * diffMatrix.ùíü·∂ª\ndiffMatrix.ùíü‚Å¥·∂ª = diffMatrix.ùíü¬≤·∂ª * diffMatrix.ùíü¬≤·∂ª\n\n# z1, D1z = chebdif(params.Nz, 1)\n# _,  D2z = chebdif(params.Nz, 2)\n# _,  D3z = chebdif(params.Nz, 3)\n# _,  D4z = chebdif(params.Nz, 4)\n# # Transform the domain and derivative operators from [-1, 1] ‚Üí [0, H]\n# grid.z, diffMatrix.ùíü·∂ª, diffMatrix.ùíü¬≤·∂ª  = chebder_transform(z1,  D1z,\n#                                                                 D2z,\n#                                                                 zerotoL_transform,\n#                                                                 params.H)\n# _, _, diffMatrix.ùíü‚Å¥·∂ª = chebder_transform_ho(z1, D1z,\n#                                                 D2z,\n#                                                 D3z,\n#                                                 D4z,\n#                                                 zerotoL_transform_ho,\n#                                                 params.H)\n\n#@printf \"size of Chebyshev matrix: %d √ó %d \\n\" size(diffMatrix.ùíü·∂ª)[1]  size(diffMatrix.ùíü·∂ª)[2]\n\n@assert maximum(grid.z) ‚âà params.H && minimum(grid.z) ‚âà 0.0\n\nreturn nothing","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"end","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"function ImplementBCs_cheb!(Op, diffMatrix, params)     I ∏ = sparse(Matrix(1.0I, params.Ny, params.Ny)) #Eye{Float64}(params.Ny)     I·∂ª = sparse(Matrix(1.0I, params.Nz, params.Nz)) #Eye{Float64}(params.Nz)","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"# Cheb matrix with Dirichilet boundary condition\ndiffMatrix.ùíü·∂ª·¥∞  = deepcopy( diffMatrix.ùíü·∂ª  )\ndiffMatrix.ùíü¬≤·∂ª·¥∞ = deepcopy( diffMatrix.ùíü¬≤·∂ª )\ndiffMatrix.ùíü‚Å¥·∂ª·¥∞ = deepcopy( diffMatrix.ùíü‚Å¥·∂ª )\n\n# Cheb matrix with Neumann boundary condition\ndiffMatrix.ùíü·∂ª·¥∫  = deepcopy( diffMatrix.ùíü·∂ª  )\ndiffMatrix.ùíü¬≤·∂ª·¥∫ = deepcopy( diffMatrix.ùíü¬≤·∂ª )\n\nsetBCs!(diffMatrix, params, \"dirchilet\")\nsetBCs!(diffMatrix, params, \"neumann\"  )\n\nkron!( Op.ùíü·∂ª·¥∞  ,  I ∏ , diffMatrix.ùíü·∂ª·¥∞  )\nkron!( Op.ùíü¬≤·∂ª·¥∞ ,  I ∏ , diffMatrix.ùíü¬≤·∂ª·¥∞ )\nkron!( Op.ùíü‚Å¥·∂ª·¥∞ ,  I ∏ , diffMatrix.ùíü‚Å¥·∂ª·¥∞ )\n\nkron!( Op.ùíü·∂ª·¥∫  ,  I ∏ , diffMatrix.ùíü·∂ª·¥∫ )\nkron!( Op.ùíü¬≤·∂ª·¥∫ ,  I ∏ , diffMatrix.ùíü¬≤·∂ª·¥∫)\n\nkron!( Op.ùíü ∏   ,  diffMatrix.ùíü ∏  ,  I·∂ª )\nkron!( Op.ùíü¬≤ ∏  ,  diffMatrix.ùíü¬≤ ∏ ,  I·∂ª )\nkron!( Op.ùíü‚Å¥ ∏  ,  diffMatrix.ùíü‚Å¥ ∏ ,  I·∂ª )\n\nkron!( Op.ùíü ∏¬≤·∂ª·¥∞  ,  diffMatrix.ùíü ∏  ,  diffMatrix.ùíü¬≤·∂ª·¥∞ )\nkron!( Op.ùíü¬≤ ∏¬≤·∂ª·¥∞ ,  diffMatrix.ùíü¬≤ ∏ ,  diffMatrix.ùíü¬≤·∂ª·¥∞ )\n\nreturn nothing","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"end","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"function construct_matrices(Op, params)\n    N  = params.Ny * params.Nz\n    I‚Å∞ = sparse(Matrix(1.0I, N, N)) #Eye{Float64}(N)\n    s‚ÇÅ = size(I‚Å∞, 1); s‚ÇÇ = size(I‚Å∞, 2)","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"allocating memory for the LHS and RHS matrices","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"    ùìõ‚ÇÅ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ùìõ‚ÇÇ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ùìõ‚ÇÉ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n\n    ‚Ñ≥‚ÇÅ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ‚Ñ≥‚ÇÇ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n    ‚Ñ≥‚ÇÉ = SparseMatrixCSC(Zeros{Float64}(s‚ÇÅ, 3s‚ÇÇ))\n\n    @printf \"Start constructing matrices \\n\"","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì construct matrix  ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì lhs of the matrix (size := 3 √ó 3) eigenvectors: [u·∂ª œâ·∂ª Œ∏]·µÄ","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"    ‚àá‚Çï¬≤ = SparseMatrixCSC(Zeros(N, N))\n    ‚àá‚Çï¬≤ = (1.0 * Op.ùíü¬≤ ∏ - 1.0 * params.k‚Çì^2 * I‚Å∞)\n\n    D‚Å¥ = (1.0 * Op.ùíü‚Å¥ ∏ + 1.0 * Op.ùíü‚Å¥·∂ª·¥∞ + 2.0 * Op.ùíü¬≤ ∏¬≤·∂ª·¥∞\n        + 1.0 * params.k‚Çì^4 * I‚Å∞\n        - 2.0 * params.k‚Çì^2 * Op.ùíü¬≤ ∏\n        - 2.0 * params.k‚Çì^2 * Op.ùíü¬≤·∂ª·¥∞)\n\n    D¬≤  = 1.0 * Op.ùíü¬≤·∂ª·¥∞ + 1.0 * Op.ùíü¬≤ ∏ - 1.0 * params.k‚Çì^2 * I‚Å∞\n    D‚Çô¬≤ = 1.0 * Op.ùíü¬≤·∂ª·¥∫ + 1.0 * Op.ùíü¬≤ ∏ - 1.0 * params.k‚Çì^2 * I‚Å∞\n\n    # 1. u·∂ª (vertical velocity) equation\n    ùìõ‚ÇÅ[:,    1:1s‚ÇÇ] =  1.0 * params.E * D‚Å¥\n    ùìõ‚ÇÅ[:,1s‚ÇÇ+1:2s‚ÇÇ] = -1.0 * Op.ùíü·∂ª·¥∫\n    ùìõ‚ÇÅ[:,2s‚ÇÇ+1:3s‚ÇÇ] =  0.0 * I‚Å∞\n\n    # 2. œâ·∂ª (vertical vorticity) equation\n    ùìõ‚ÇÇ[:,    1:1s‚ÇÇ] = 1.0 * Op.ùíü·∂ª·¥∞\n    ùìõ‚ÇÇ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * params.E * D‚Çô¬≤\n    ùìõ‚ÇÇ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 0.0 * I‚Å∞\n\n    # 3. Œ∏ (temperature) equation\n    ùìõ‚ÇÉ[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞\n    ùìõ‚ÇÉ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 0.0 * I‚Å∞\n    ùìõ‚ÇÉ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0 * D¬≤\n\n    ùìõ = ([ùìõ‚ÇÅ; ùìõ‚ÇÇ; ùìõ‚ÇÉ]);\n\n##############\n    ‚Ñ≥‚ÇÅ[:,2s‚ÇÇ+1:3s‚ÇÇ] = -1.0 * ‚àá‚Çï¬≤\n\n    ‚Ñ≥ = ([‚Ñ≥‚ÇÅ; ‚Ñ≥‚ÇÇ; ‚Ñ≥‚ÇÉ])\n\n    return ùìõ, ‚Ñ≥\nend\n\n@with_kw mutable struct Params{T<:Real} @deftype T\n    L::T        = 2œÄ          # horizontal domain size\n    H::T        = 1.0         # vertical domain size\n    Œì::T        = 0.1         # front strength Œì ‚â° M¬≤/f¬≤ = Œª/H = 1/Œµ ‚Üí Œµ = 1/Œì\n    Œµ::T        = 0.1         # aspect ratio Œµ ‚â° H/L\n    k‚Çì::T       = 0.0         # x-wavenumber\n    E::T        = 1.0e-4      # Ekman number\n    Ny::Int64   = 180         # no. of y-grid points\n    Nz::Int64   = 20          # no. of z-grid points\n    method::String   = \"arnoldi\"\nend\n\nfunction EigSolver(Op, params, œÉ‚ÇÄ)\n\n    printstyled(\"k‚Çì: $(params.k‚Çì) \\n\"; color=:blue)\n\n    ùìõ, ‚Ñ≥ = construct_matrices(Op,  params)\n\n    N = params.Ny * params.Nz\n    MatrixSize = 3N\n    @assert size(ùìõ, 1)  == MatrixSize &&\n            size(ùìõ, 2)  == MatrixSize &&\n            size(‚Ñ≥, 1)  == MatrixSize &&\n            size(‚Ñ≥, 2)  == MatrixSize \"matrix size does not match!\"\n\n    if params.method == \"shift_invert\"\n\n        Œª‚Çõ, Œß = EigSolver_shift_invert_arpack( ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ‚ÇÄ, maxiter=40, which=:LM)\n\n    elseif params.method == \"krylov\"\n\n         Œª‚Çõ, Œß = EigSolver_shift_invert_krylov( ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ‚ÇÄ, maxiter=40, which=:LM)\n\n    elseif params.method == \"arnoldi\"\n\n        Œª‚Çõ, Œß = EigSolver_shift_invert_arnoldi( ùìõ, ‚Ñ≥,\n                                            œÉ‚ÇÄ=0.0,\n                                            maxiter=50000,\n                                            which=LM())\n\n        Œª‚Çõ, Œß = remove_evals(Œª‚Çõ, Œß, 10.0, 1.0e15, \"R\")\n        Œª‚Çõ, Œß = sort_evals(Œª‚Çõ, Œß, \"R\", \"\")\n\n    end\n\n    return Œª‚Çõ[1] #, Œß[:,1]\nend\n\nfunction solve_rRBC(k‚Çì::Float64)\n    params      = Params{Float64}(k‚Çì=0.5)\n    grid        = TwoDimGrid{params.Ny,  params.Nz}()\n    diffMatrix  = ChebMarix{ params.Ny,  params.Nz}()\n    Op          = Operator{params.Ny * params.Nz}()\n    Construct_DerivativeOperator!(diffMatrix, grid, params)\n    ImplementBCs_cheb!(Op, diffMatrix, params)\n\n    œÉ‚ÇÄ   = 0.0\n    params.k‚Çì = k‚Çì\n\n    Œª‚Çõ = EigSolver(Op, params, œÉ‚ÇÄ)\n\n    # Theoretical results from Chandrashekar (1961)\n    Œª‚Çõ‚Çú = 189.7\n\n    return abs(real(Œª‚Çõ) - Œª‚Çõ‚Çú)/Œª‚Çõ‚Çú < 1e-4\n\nend\n\nsolve_rRBC(0.0)","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"","category":"page"},{"location":"literated/rRBC.html","page":"rRBC","title":"rRBC","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#BiGSTARS.jl-Documentation","page":"Home","title":"BiGSTARS.jl Documentation","text":"","category":"section"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"BiGSTARS.jl is a collection of modules to provide solvers for problems in Geophysical Fluid Dynamics, on periodic domains using Fourier-based pseudospectral methods.","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Examples aim to demonstrate the main functionalities of each module.  Have a look at our Examples collection!","category":"page"}]
}
